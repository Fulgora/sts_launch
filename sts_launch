CLEARSCREEN.
PRINT " ".
PRINT "**************************************************".
PRINT "**                                              **".
PRINT "**                                              **".
PRINT "**            STS Launch-script v0.4            **".
PRINT "**                                              **".
PRINT "**                                              **".
PRINT "**               (c) Fulgora 2021               **".
PRINT "**                License: GPLv3                **".
PRINT "**                                              **".
PRINT "**    https://github.com/Fulgora/sts_launch     **".
PRINT "**************************************************".
PRINT " ".

// ******************************************************************** //
// ********************** VARIABLE-DECLARATIONS *********************** //
// ******************************************************************** //

// Set a global time (UTC) at which the shuttle will be launched.
// This is useful when launching multiple crafts at once as well as when
// trying to hit a launch window very precisely.
// Note: currenly NO auto-warp to launch is implemented!
// Default is False
SET use_launch_time TO True.
SET launch_time TO TIMESTAMP(0,348,3,9,40).

// If using simple staging the stage separations will use the configuration
// that was set up ingame in the VAB. If this is set to False the script will
// collect the parts that are relevant for staging (engines, decouplers, sepatrons)
// at the start and then trigger their staging actions "one" by "one".
// The latter only works with my STS v4 design but has the benefit that it can be
// executed for crafts that are currently not in focus/active opposed to the
// "space bar" staging which only works with the active craft. This is the feature
// I use to launch multiple shuttle stacks at once to orbit ;-).
// Default is True
SET simple_staging TO False.

// Target altitude in m to start first gravity turn (90 -> 45°)
// Default for max payload is 500
SET gravity_turn_1 TO 500.

// Target altitude in m to start first gravity turn (45 -> 0°)
// Default for max payload is 15000
SET gravity_turn_2 TO 15000.

// Maximum target apoapsis height
// Default for max payload is 75000 (do not set below 75000!)
SET max_apoapsis TO 100000.

// Maximum pitch compensation for low TWR (max degrees from Prograde)
// Default for max payload is 17
SET max_pitch_compensation TO 1.

// Name of the main engine that is supposed to be throttled when running
// out of gimble. (Currently set to mammoth, only needed for Buran-style crafts)
// Default is False
SET use_engine_throttle TO False.
SET main_engine TO "Size3EngineCluster".

// Do not change this one - code is (currently) not working when not launching 'backwards'
SET bellyUp TO True.

// Default is 0
SET launchpad_orientation TO 0.
// Default is 0
SET inclination TO 0.

// ******************************************************************** //
// *** SCRIPT - DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING ;) *** //
// ******************************************************************** //

if simple_staging = False {
    PRINT "Parsing ship parts for stage caching...".
    PRINT "0 %" AT (42,13).
    // Collect staging information for stage 0 and 1.
    SET stage_0_engines TO get_stage_0_engines().
    PRINT "16.7 %" AT (42,13).
    SET stage_0_separators TO get_stage_0_separators().
    PRINT "33.3 %" AT (42,13).
    SET stage_0_clamps TO get_stage_0_clamps().
    PRINT "50.0 %" AT (42,13).
    SET stage_1_engines TO get_stage_1_engines().
    PRINT "66.7 %" AT (42,13).
    SET stage_1_separators TO get_stage_1_separators().
    PRINT "83.3 %" AT (42,13).
    SET stage_1_dropped TO False.

    // Get ships solid fuel resource object for stage 1 calculations
    FOR RES IN SHIP:RESOURCES {
        IF RES:NAME = "solidfuel" {
            SET solid_fuel_resource TO RES.
        }
    }
    PRINT "100 % " AT (42,13).

} else {
    PRINT " ".
}

SET countdown_start TO 10.
IF use_launch_time {
    // Substract 10 seconds from wait time because of the countdown.
    SET wait_time TO launch_time - TIME() - TIMESTAMP(0,0,0,0,10).
    SET countdown_start TO FLOOR(wait_time:SECONDS).
    WAIT wait_time:SECONDS - countdown_start.
}
PRINT "Initiating launch in " + countdown_start + " seconds.".
PRINT " ".

// Countdown
PRINT "IGNITION IN... T-".
FROM {local countdown is countdown_start.} UNTIL countdown = 0 STEP {SET countdown to countdown - 1.} DO {
    PRINT countdown + " " AT (17,16).
    WAIT 1. // pauses the script here for 1 second.
}

PRINT 0 + " " AT (17,16).
WAIT 0.2.

// Let's roll

LOCK THROTTLE TO 1.0.
PRINT " ".
PRINT "*** IGNITION ***".
PRINT " ".
stage_0(stage_0_engines, stage_0_separators, stage_0_clamps).

PRINT "Lift-off.".

SET launch_face TO 0.
if(bellyUp) {
    SET launch_face TO 90 - inclination.
} else {
    SET launch_face TO 270 - inclination.
}

SET max_thrust_tmp TO SHIP:MAXTHRUST.

SET launch_height TO SHIP:ALTITUDE.

BRAKES OFF.

UNTIL (SHIP:ALTITUDE > gravity_turn_1) {
    getDiffFacePrograde(up + R(0,0,launch_face) + R(0,0,0)).
    IF stage_1_dropped = False {
        SET stage_1_dropped TO ensure_safe_staging(stage_1_engines, stage_1_separators, solid_fuel_resource).
    }
    SET max_thrust_tmp TO SHIP:MAXTHRUST.
    SET current_orientation TO (SHIP:ALTITUDE / gravity_turn_1) * (inclination - launchpad_orientation).
    if(SHIP:ALTITUDE < launch_height + 50) {
        SET current_orientation TO 0.
    }
    LOCK STEERING TO up + R(0,0,(launch_face + inclination) - launchpad_orientation - current_orientation) + R(0,0,0).

    WAIT 0.1. // just trying not to fry your actual (physical) CPU
}
RCS OFF.

PRINT "Starting gravity turn.".
SET start_alt TO SHIP:ALTITUDE.
UNTIL SHIP:ALTITUDE > gravity_turn_2 {
    SET distance_to_ground TO (SHIP:ALTITUDE - start_alt).
    SET temp TO distance_to_ground / (gravity_turn_2 - start_alt).
    if(bellyUp) {
        SET target_vector TO up + R(0, 0, launch_face) + R(0, -45 * temp, 0) - R(inclination * temp, 0, 0).
        getDiffFacePrograde(target_vector).
        PRINT round(target_vector:yaw,1) AT (40,21).
        LOCK STEERING TO target_vector.
    }
    else {
        SET heading TO up + R(0, 0, launch_face) + R(0, 45 * temp, 0) + R(inclination, 0, 0).
        getDiffFacePrograde(heading).
        PRINT round(heading:yaw,1) AT (40,21).
        LOCK STEERING TO heading.
    }

    WAIT 0.1. // just trying not to fry your actual (physical) CPU

    IF stage_1_dropped = False {
        SET stage_1_dropped TO ensure_safe_staging(stage_1_engines, stage_1_separators, solid_fuel_resource).
    }
    SET max_thrust_tmp TO SHIP:MAXTHRUST.
}

// Calculate altitude at which the gravity turn will be completed
SET gravity_turn_3 TO 75000.

SET start_alt TO SHIP:APOAPSIS.
SET conversion_factor  TO 0.
SET prograde_lock TO False.
SET last_throttle TO TIME:SECONDS.
SET initial_twist TO 0.
SET diff_total TO 0.
SET ang_momentum_count TO 0.
SET ang_momentum_avg TO 0.
SET prev_ang_momentum TO 0.
SET initial_momentum_direction TO 0.
SET prev_diff TO -1.
SET last_time_to_apo_1 TO ETA:Apoapsis.
SET last_time_to_apo_2 TO ETA:Apoapsis.
SET low_trust_compensation TO 0.
SET current_throttle TO 1.0.
SET safe_twr TO False.
SET target_eta_to_apoapsis TO 10.
UNTIL SHIP:APOAPSIS >= max_apoapsis {
    PRINT round(SHIP:ANGULARMOMENTUM:x,1) + " - " + round(ang_momentum_avg,1) AT (10,33).
    SET distance_to_ground TO (SHIP:APOAPSIS - start_alt).
    SET temp TO distance_to_ground / (gravity_turn_3 - start_alt).
    SET target_vector TO up + R(0, 0, launch_face).
    SET low_trust_compensation TO get_pitch_compensation(low_trust_compensation, last_time_to_apo_1, last_time_to_apo_2).
    PRINT ROUND(low_trust_compensation,1) AT (27,27).
    SET last_time_to_apo_2 TO last_time_to_apo_1.
    SET last_time_to_apo_1 TO ETA:Apoapsis.
    if(bellyUp) {
        SET target_vector TO up + R(0, 0, launch_face) + R(0, -45 - (45 * temp) + low_trust_compensation, 0) - R(inclination, 0, 0).
        PRINT ROUND(target_vector:yaw,1) AT (40,20).
        SET diff TO adjustTargetPitch(target_vector, bellyUp).

        PRINT ROUND(conversion_factor,1) AT (40,19).
        PRINT ROUND(diff,1) AT (40,18).
        if(diff <> 0 OR conversion_factor > 0) {
            SET diff_total TO diff_total + conversion_factor * diff * -1.
            SET target_vector TO target_vector + R(0, diff_total, 0).

            // If turning the wrong way invert the turning direction
            if(getDiffTargetPrograde(target_vector) > diff) {
                SET diff_total TO diff_total + conversion_factor * diff.
                SET target_vector TO target_vector + R(0, diff_total, 0).
            }

            if(conversion_factor < 1) {
                SET conversion_factor TO conversion_factor + 0.0001.
            }
        }

        if(prograde_lock OR (getDiffFacePrograde(target_vector) > -2 AND getDiffFacePrograde(target_vector) < 2 AND conversion_factor > 0)) {
            //LOCK STEERING TO SHIP:PROGRADE.
            PRINT "Converging completed... " AT (20,34).
            SET prgd_lock TO SHIP:PROGRADE + R(0, low_trust_compensation, 180).
            LOCK STEERING TO prgd_lock.
            SET prograde_lock TO True.
        } else {
            LOCK STEERING TO target_vector.
        }

        PRINT ROUND(target_vector:yaw,1) AT (40,21).
    } else {
        SET current_target_pitch TO 45 - (45 * temp).
        SET current_target_pitch TO adjustTargetPitch(current_target_pitch, bellyUp).

        LOCK STEERING TO up + R(0,0,180) + R(0,current_target_pitch,0).
        PRINT ROUND(current_target_pitch,1) AT (40,21).
    }

    WAIT 0.1. // just trying not to fry your actual (physical) CPU

    IF stage_1_dropped = False {
        SET stage_1_dropped TO ensure_safe_staging(stage_1_engines, stage_1_separators, solid_fuel_resource).
    }

    SET pitch_diff TO vectorangle(SHIP:FACING:FOREVECTOR, target_vector:vector).
    if(prograde_lock) {
        SET pitch_diff TO getDiffFacePrograde(target_vector).
    }

    SET allowThrottle TO True.

    PRINT "Pitch-Diff: " + ROUND(pitch_diff,1) + "  " AT (27,26).
    if(pitch_diff <= 0.5 AND pitch_diff >= -0.5) {
        SET tmp_ang_mom TO ang_momentum_avg * ang_momentum_count.
        SET tmp_ang_mom TO tmp_ang_mom + ABS(SHIP:ANGULARMOMENTUM:x).
        SET ang_momentum_avg TO tmp_ang_mom / (ang_momentum_count + 1).
        SET ang_momentum_count TO ang_momentum_count + 1.
    }

    if(ABS(SHIP:ANGULARMOMENTUM:x) > ang_momentum_avg * 2 AND allowThrottle) {
        if initial_momentum_direction = 0 {
            if SHIP:ANGULARMOMENTUM:x > 0 {
                SET initial_momentum_direction TO 1.
            } else {
                SET initial_momentum_direction TO -1.
            }
        }
        SET tmp_momentum TO initial_momentum_direction * SHIP:ANGULARMOMENTUM:x.
        if(use_engine_throttle) {
            throttleMainEngine(tmp_momentum > 0).
        }
    } else {
        PRINT "[o]" AT (45,27).
    }

    SET prev_ang_momentum TO ABS(SHIP:ANGULARMOMENTUM:x).

    SET max_thrust_tmp TO SHIP:MAXTHRUST.

    // Reduce thrust if we are almost in orbit and have excess thrust to get a nice(r) orbit injection
    // Basically this does the following:
    // If the shuttle has reached the point where under full thrust it can push the Apoapsis it will
    // reduce thrust until time to apoapsis < 10 seconds. After reaching this point it will hold
    // the time to apopsis constantly around 10 seconds until orbit insertion is complete and then
    // boot the apoapsis to the target altitude.
    PRINT "Throttle: " + MIN((CEILING(current_throttle * 100) + 1), 100) + " " AT (0,29).
    if(ETA:Apoapsis < target_eta_to_apoapsis OR (SHIP:PERIAPSIS > 70000 AND SHIP:APOAPSIS < 0.8 * max_apoapsis)) {
        PRINT "% (+)" AT (13,29).
        SET current_throttle TO MIN(current_throttle * 1.01, 1.0).        
    } else if(stage_1_dropped AND ETA:Apoapsis > target_eta_to_apoapsis AND SHIP:APOAPSIS > 70000 AND
        (
            (safe_twr = True AND (last_time_to_apo_1 - last_time_to_apo_2) > -0.07)) OR
            (safe_twr = False AND (last_time_to_apo_2 - last_time_to_apo_1) < 0.06
        )
    ) {
        PRINT "% (-)" AT (13,29).
        SET safe_twr TO True.
        // Reduce thrust before reaching target apoapsis to ensure hitting it as close as possible
        // Otherwise limit throtteling to 50%
        if (SHIP:APOAPSIS < 0.8 * max_apoapsis) {
            SET current_throttle TO MAX(current_throttle * 0.985, 0.5).
        } else if (SHIP:APOAPSIS > 0.99 * max_apoapsis) {
            SET current_throttle TO 0.1.
        } else if (SHIP:APOAPSIS > 0.8 * max_apoapsis) {
            SET current_throttle TO MAX((1 - (((100 / max_apoapsis) * SHIP:APOAPSIS) / 100)) * 1.5, 0.02).
        }       
    } else {
        PRINT "% (o)" AT (13,29).
    }
    SET current_throttle_tmp TO (CEILING(current_throttle * 100) + 1) / 100.
    if (safe_twr AND stage_1_dropped AND ETA:Apoapsis < target_eta_to_apoapsis AND target_eta_to_apoapsis > 5 AND last_time_to_apo_1 < last_time_to_apo_2 ) {
        SET target_eta_to_apoapsis TO ETA:Apoapsis.
    }

    LOCK THROTTLE TO current_throttle_tmp.
}

LOCK THROTTLE TO 0.
SET SHIP:CONTROL:PILOTMAINTHROTTLE TO 0.
SAS ON.

PRINT "Gravity turn complete.".

create_circ_node(max_apoapsis).

WAIT 5.

CLEARSCREEN.

PRINT "**************************************************".
PRINT "**                                              **".
if SHIP:PERIAPSIS > 70000 {
    PRINT "**                                              **".
    PRINT "**            >>> Orbit achieved <<<            **".
    PRINT "**                                              **".
} else {
    PRINT "**                                              **".
    PRINT "**        >>> COULD NOT REACH ORBIT <<<         **".
    PRINT "**                                              **".
}
if (ABS(SHIP:APOAPSIS - max_apoapsis) < 100) {
    PRINT "**                                              **".
    PRINT "**       Target maximum apoapsis reached        **".
    PRINT "**                                              **".
} else {
    PRINT "**                                              **".
    PRINT "**     Apoapsis: " + FLOOR(SHIP:APOAPSIS) + "m (target: " + max_apoapsis + "m)".
    PRINT "**" AT (48,6).
    PRINT "**                                              **".
}
PRINT "**                                              **".
PRINT "**                                              **".
PRINT "**                                              **".
PRINT "**           Transferring control back          **".
PRINT "**                                              **".
PRINT "**  I hope you had a pleasent flight (so far)   **".
PRINT "**                     :D                       **".
PRINT "**                      _                       **".
PRINT "**                     / \                      **".
PRINT "**                    |.-.|                     **".
PRINT "**                    |   |                     **".
PRINT "**                    |   |                     **".
PRINT "**                    | F |                     **".
PRINT "**                  _ | U | _                   **".
PRINT "**                 / \| L |/ \                  **".
PRINT "**                |   | G |   |                 **".
PRINT "**                |   | O |   |                 **".
PRINT "**               ,'   | R |   '.                **".
PRINT "**             ,' |   | A |   | `.              **".
PRINT "**           .'___|___|_ _|___|___'.            **".
PRINT "**                 /_\ /_\ /_\                  **".
PRINT "**            STS Launch-script v0.4            **".
PRINT "**                                              **".
PRINT "**    https://github.com/Fulgora/sts_launch     **".
PRINT "**************************************************".
PRINT " ".

// In percent
declare function getTWR
{
    set mth to getMaxThrust().
    set r to SHIP:ALTITUDE+SHIP:BODY:RADIUS.
    set w to SHIP:MASS * SHIP:BODY:MU / r / r.

    SET twr TO mth/w.

    PRINT "MTH: " + mth + " -> TWR: " + twr.
    return twr.
}

declare function throttleMainEngine
{
    DECLARE PARAMETER direction.
    SET throttle_adjustment TO 0.05.
    if(direction) {
        SET throttle_adjustment TO throttle_adjustment * -1.
        PRINT "[-]" AT (45,27).
    } else {
        PRINT "[+]" AT (45,27).
    }

    LIST ENGINES IN engines.
    FOR eng IN engines {
        IF eng:Name:CONTAINS(main_engine) {
            SET limit TO eng:THRUSTLIMIT * (1 + throttle_adjustment).
            SET eng:THRUSTLIMIT TO limit.
        }
    }.
}

declare function printEngines
{
    LIST ENGINES IN engines.
    FOR eng IN engines {
        PRINT eng:Name + ": " + eng:MAXTHRUST.
    }.
}

declare function getMaxThrust
{
    LIST ENGINES IN engines.
    SET thrust to 0.
    FOR eng IN engines {
        SET thrust TO thrust + (eng:THRUST * eng:THRUSTLIMIT).
    }.
    return thrust.
}

declare function getDiffFacePrograde
{
    DECLARE PARAMETER target_vector_01.
    SET diffFacePrograde TO getDiffTargetPrograde(target_vector_01) - getDiffTargetFacing(target_vector_01).
    PRINT "Diff Facing-Prograde: " + round(diffFacePrograde,1) AT (0,32).
    return diffFacePrograde.
}

declare function getDiffTargetFacing
{
    DECLARE PARAMETER target_vector_02.
    SET diffTargetFacing TO vectorangle(SHIP:FACING:FOREVECTOR, target_vector_02:vector).
    PRINT "Diff Target-Facing: " + round(diffTargetFacing,1) AT (0,31).
    return diffTargetFacing.
}

declare function getDiffTargetPrograde
{
    DECLARE PARAMETER target_vector_03.
    SET prgd_tmp TO SHIP:PROGRADE.
    if(SHIP:ALTITUDE) {
       SET prgd_tmp TO SHIP:SRFPROGRADE.
    }

    SET diffTargetPrograde TO vectorangle(prgd_tmp:FOREVECTOR, target_vector_03:vector).
    PRINT "Diff Target-Prograde: " + round(diffTargetPrograde,1) AT (0,30).
    return diffTargetPrograde.
}

declare function adjustTargetPitch
{
    DECLARE PARAMETER target_vector_04, bellyUp.
    SET prgDiff TO 0.
    SET prgDiff_tmp TO getDiffTargetPrograde(target_vector_04).
    IF(SHIP:APOAPSIS > 40000 AND ETA:APOAPSIS > 50) {
        SET prgDiff TO prgDiff_tmp.
        PRINT "Converging to prograde..." AT (20,35).
    }

    return prgDiff.
}

declare function ensure_safe_staging
{
    DECLARE PARAMETER stage_1_engines, stage_1_separators, solid_fuel_resource.
    IF (solid_fuel_resource:AMOUNT < 5000 AND solid_fuel_resource:AMOUNT > 0) {
        RCS ON.
    }
    IF (SHIP:MAXTHRUST < max_thrust_tmp AND solid_fuel_resource:AMOUNT < 100) {
        stage_1(stage_1_engines, stage_1_separators).
        switch_controlpoint().
        WAIT 1.
        RCS OFF.
        return True.
    }
    return False.
}

declare function get_pitch_compensation
{
    DECLARE PARAMETER low_trust_compensation, last_time_to_apo_1, last_time_to_apo_2.
    IF (ETA:Apoapsis > 120 and low_trust_compensation = 0 OR ETA:Apoapsis > 600) {
        return 0.
    }
    IF (ETA:Apoapsis < last_time_to_apo_1) {
        IF (low_trust_compensation = 0) {
            // Start at half of max_pitch_compensation to avoid high AoA right after max Q
            // The else branch will slowly increase the compensation until max_pitch_compensation.
            // This value is also very beneficial for launches with light payloads as the profile in
            // that case doesn't need much TWR compensation.
            return max_pitch_compensation / 2.
        } ELSE {
            SET tta_diff_1 TO last_time_to_apo_2 - last_time_to_apo_1.
            SET tta_diff_2 TO last_time_to_apo_1 - ETA:Apoapsis.
            PRINT ROUND(tta_diff_1,5) AT (27,28).
            PRINT ROUND(tta_diff_2,5) AT (27,29).
            IF (tta_diff_1 > tta_diff_2 * 0.95) {
                // Increase compensation if the we are not slowing down on the time lost to apo
                PRINT "+" AT (38,27).
                // If we are only losing 0.3 seconds per second to apo we can decrease the pitch compensation.
                // Using the average of the last two cycles to smooth out the curve
                SET compensation_limit TO MIN(max_pitch_compensation * (((tta_diff_2 + tta_diff_1) / 2) / 0.05), max_pitch_compensation).
                // Using the average between the current compensation and the newly calculated as max value - again to smoothen things
                return MIN(low_trust_compensation * 1.005, (compensation_limit + low_trust_compensation * 3) / 4).
            } ELSE {
                // If we are slowing down its ok and we can keep the current compensation
                PRINT "-" AT (38,27).
                return low_trust_compensation * 0.995.
            }
        }
    } ELSE {
        PRINT "-" AT (38,27).
        return low_trust_compensation * 0.995.
    }
}

declare function switch_controlpoint
{
    FOR P IN SHIP:PARTS {
        IF (P:NAME = "probeCoreOcto2.v2" AND P:STAGE = 4) {
            FOR module in P:MODULES {
                IF (P:HASMODULE(module) and module = "ModuleCommand") {
                    P:GETMODULE(module):DOACTION("control from here", True).
                }
            }
        }
    }.
}

declare function get_stage_0_engines
{
    SET stage_0_engines TO list().
    FOR P IN SHIP:PARTS {
        // radialEngineMini.v2 - Spider
        // radialLiquidEngine1-2 - Thud
        // nuclearEngine - Nerv
        // SSME - Vector
        // Thoroughbred - Thoroughbred
        // Clydesdale - Clydesdale
        IF (P:NAME = "radialEngineMini.v2" or
            P:NAME = "radialLiquidEngine1-2" or
            P:NAME = "nuclearEngine" or
            P:NAME = "SSME" or
            P:NAME = "Thoroughbred" or
            P:NAME = "Clydesdale") {
            FOR module in P:MODULES {
                FOR module in P:MODULES {
                    IF (P:HASMODULE(module) and module = "ModuleEnginesFX") {
                        stage_0_engines:ADD(P:GETMODULE(module)).
                    }
                }
            }
        }
    }
    return stage_0_engines.
}

declare function get_stage_0_separators
{
    SET stage_0_separators TO list().
    FOR P IN SHIP:PARTS {
        // radialDecoupler2 - Large Decoupler
        IF (P:NAME = "radialDecoupler2" or P:NAME = "launchClamp1") {    
            FOR module in P:MODULES {
                IF (P:NAME = "radialDecoupler2" AND P:CHILDREN[0]:NAME = "mk2.1m.AdapterLong" AND P:HASMODULE(module) AND module = "ModuleAnchoredDecoupler") {
                    stage_0_separators:ADD(P:GETMODULE(module)).
                }
            }
        }
    }
    return stage_0_separators.
}

declare function get_stage_0_clamps
{
    SET stage_0_clamps TO list().
    FOR P IN SHIP:PARTS {
        // launchClamp1 - launch clamp (duh!)
        IF (P:NAME = "radialDecoupler2" or P:NAME = "launchClamp1") {    
            FOR module in P:MODULES {
                IF (P:HASMODULE(module) and module = "LaunchClamp") {
                    stage_0_clamps:ADD(P:GETMODULE(module)).
                }
            }
        }
    }
    return stage_0_clamps.
}

declare function get_stage_1_engines
{
    SET stage_1_engines TO list().
    FOR P IN SHIP:PARTS {
        // sepMotor1 - Sepatron I
        IF (P:NAME = "sepMotor1") {
            FOR module in P:MODULES {
                FOR module in P:MODULES {
                    IF (P:HASMODULE(module) and module = "ModuleEnginesFX") {
                        stage_1_engines:ADD(P:GETMODULE(module)).
                    }
                }
            }
        }
    }
    return stage_1_engines. 
}

declare function get_stage_1_separators
{
    SET stage_1_separators TO list().
    FOR P IN SHIP:PARTS {
        // radialDecoupler2 - Large Decoupler
        IF (P:NAME = "radialDecoupler2") {
            FOR module in P:MODULES {
                IF (P:NAME = "radialDecoupler2" AND P:PARENT:NAME = "Size3LargeTank" AND P:HASMODULE(module) AND module = "ModuleAnchoredDecoupler") {
                    FOR child in P:CHILDREN {
                        IF child:NAME = "Clydesdale" {
                            stage_1_separators:ADD(P:GETMODULE(module)).
                        }
                        BREAK.
                    }
                }
            }
        }
    }
    return stage_1_separators.
}


declare function stage_0
{
    DECLARE PARAMETER stage_0_engines, stage_0_separators, stage_0_clamps.
    RCS ON.
    FOR P in stage_0_engines {
        P:DOACTION("activate engine", True).
    }
    FOR P in stage_0_separators {
        P:DOACTION("decouple", True).
    }
    //FOR P in stage_0_clamps {
    //    P:DOACTION("release clamp", True).
    //}
}

declare function stage_1
{
    DECLARE PARAMETER stage_1_engines, stage_1_separators.
    FOR P in stage_1_engines {
        P:DOACTION("activate engine", True).
    }
    FOR P in stage_1_separators {
        P:DOACTION("decouple", True).
    }
}


// The function below has been written by Reddit user u/kjnicoletti
// https://www.reddit.com/r/Kos/comments/5rp0w5/comment/ddjbqqr/?utm_source=share&utm_medium=web2x&context=3
declare function create_circ_node {

	// create maneuver node to circularize orbit after initial ascent
	
	PARAMETER targetOrbit.
	
	// calculate surface gravity
	// SurfaceGravity = GravitationalConstant * MassOfBody / RadiusOfBody^2
	// (GravitationalConstant * MassOfBody) is also known as the Gravitational Parameter - available in kOS as BODY:MU
	LOCAL srfcGravity IS ( BODY:MU/BODY:RADIUS^2 ).

	// calculate orbital speed for desired orbit
	// OrbitalSpeed = RadiusOfBody x SQRT ( Surface Gravity / ( Radius Of Body + Desired Orbit) )
	LOCAL orbitalSpeed IS ( BODY:RADIUS * SQRT(srfcGravity/(BODY:RADIUS+targetOrbit)) ).

	// calculate speed at current apoapsis
	// SpeedAtApoapsis = SQRT ( GravitationalConstant * MassOfBody * ( 2/RadiusOfShipsOrbit - 1/SemiMajorAxisOfShipsOrbit ) )
	// (GravitationalConstant * MassOfBody) is also known as the Gravitational Parameter - available in kOS as BODY:MU
	LOCAL speedAtApo IS SQRT ( BODY:MU * ( 2/(BODY:RADIUS+SHIP:APOAPSIS) - 1/SHIP:ORBIT:SEMIMAJORAXIS ) ).

	// calculate deltaV required to circularize
	// {deltaV to Circularize} = {Orbital Speed of Desired Orbit} - {Speed at Apoapsis of Current Orbit}
	LOCAL dvCirc IS orbitalSpeed-speedAtApo.

	// create maneuver node to circularize orbit
	LOCAL circNode IS NODE ( TIME:SECONDS+ETA:APOAPSIS, 0, 0, dvCirc).
	ADD circNode.
	
	PRINT "Circularization maneuver node created.".

	RETURN circNode.
	
}
